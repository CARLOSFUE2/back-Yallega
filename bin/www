#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('myappexample:server');
let http = require('http');



/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);
/*
const server = app.listen(app.get('port'), ()=>{
  console.log('server on port', app.get('port'))
}) */

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log('server on port '+ port)


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


//sockets funtionamiento
let io = require('socket.io')(server,{
  cors:{
    origin: '*',
  }
});
let connection = require('../config/connection')

io.on('conection',(socket)=>{
  //socket.emit('conection', 'data from server!');
  console.log('una coneccion fue creada con' + socket.id);
}) 
/*let socketIo = require('socket.io')
let io = socketIo(server);

io.on('conection',()=>{
  console.log('una coneccion fue creada con' );
*/
 /* socket.on(connection.change, (changes) => {
    socketIo.sockets.emit(connection.change, changes)
  });

  socket.on(connection.create, (newData) => {
    socketIo.sockets.emit(connection.create, newData)
  }); 
})*/

